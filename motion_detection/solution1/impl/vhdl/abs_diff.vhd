-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity abs_diff is
generic (
    C_M_AXI_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_BUSER_WIDTH : INTEGER := 1 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    y_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_c_AWVALID : OUT STD_LOGIC;
    m_axi_c_AWREADY : IN STD_LOGIC;
    m_axi_c_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_AWUSER_WIDTH-1 downto 0);
    m_axi_c_WVALID : OUT STD_LOGIC;
    m_axi_c_WREADY : IN STD_LOGIC;
    m_axi_c_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH/8-1 downto 0);
    m_axi_c_WLAST : OUT STD_LOGIC;
    m_axi_c_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_WUSER_WIDTH-1 downto 0);
    m_axi_c_ARVALID : OUT STD_LOGIC;
    m_axi_c_ARREADY : IN STD_LOGIC;
    m_axi_c_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ARUSER_WIDTH-1 downto 0);
    m_axi_c_RVALID : IN STD_LOGIC;
    m_axi_c_RREADY : OUT STD_LOGIC;
    m_axi_c_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_RLAST : IN STD_LOGIC;
    m_axi_c_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_RUSER_WIDTH-1 downto 0);
    m_axi_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BVALID : IN STD_LOGIC;
    m_axi_c_BREADY : OUT STD_LOGIC;
    m_axi_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_BUSER_WIDTH-1 downto 0);
    img1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    img1_TVALID : IN STD_LOGIC;
    img1_TREADY : OUT STD_LOGIC;
    img1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    img1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    img1_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    img1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    img1_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    img1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    img2_TVALID : IN STD_LOGIC;
    img2_TREADY : OUT STD_LOGIC;
    img2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    img2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    img2_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    img2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    img2_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    img2_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of abs_diff is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "abs_diff,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.802000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=172,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_M_AXI_C_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_C_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_C_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_C_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal img1_TDATA_blk_n : STD_LOGIC;
    signal img2_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal sub_ln22_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond_100_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_100_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_y_data_V_U_apdone_blk : STD_LOGIC;
    signal y_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal y_TVALID_int : STD_LOGIC;
    signal y_TREADY_int : STD_LOGIC;
    signal regslice_both_y_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_y_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_y_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_y_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_data_V_U_apdone_blk : STD_LOGIC;
    signal img1_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal img1_TVALID_int : STD_LOGIC;
    signal img1_TREADY_int : STD_LOGIC;
    signal regslice_both_img1_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_keep_V_U_apdone_blk : STD_LOGIC;
    signal img1_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_img1_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_strb_V_U_apdone_blk : STD_LOGIC;
    signal img1_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_img1_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_user_V_U_apdone_blk : STD_LOGIC;
    signal img1_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img1_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_last_V_U_apdone_blk : STD_LOGIC;
    signal img1_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img1_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_id_V_U_apdone_blk : STD_LOGIC;
    signal img1_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img1_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img1_dest_V_U_apdone_blk : STD_LOGIC;
    signal img1_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img1_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img1_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_data_V_U_apdone_blk : STD_LOGIC;
    signal img2_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal img2_TVALID_int : STD_LOGIC;
    signal img2_TREADY_int : STD_LOGIC;
    signal regslice_both_img2_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_keep_V_U_apdone_blk : STD_LOGIC;
    signal img2_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_img2_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_strb_V_U_apdone_blk : STD_LOGIC;
    signal img2_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_img2_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_user_V_U_apdone_blk : STD_LOGIC;
    signal img2_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img2_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_last_V_U_apdone_blk : STD_LOGIC;
    signal img2_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img2_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_id_V_U_apdone_blk : STD_LOGIC;
    signal img2_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img2_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_img2_dest_V_U_apdone_blk : STD_LOGIC;
    signal img2_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_img2_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_img2_dest_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_y_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => y_TDATA_int,
        vld_in => y_TVALID_int,
        ack_in => y_TREADY_int,
        data_out => y_TDATA,
        vld_out => regslice_both_y_data_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_data_V_U_apdone_blk);

    regslice_both_y_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TKEEP_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_keep_V_U_ack_in_dummy,
        data_out => y_TKEEP,
        vld_out => regslice_both_y_keep_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_keep_V_U_apdone_blk);

    regslice_both_y_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TSTRB_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_strb_V_U_ack_in_dummy,
        data_out => y_TSTRB,
        vld_out => regslice_both_y_strb_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_strb_V_U_apdone_blk);

    regslice_both_y_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TUSER_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_user_V_U_ack_in_dummy,
        data_out => y_TUSER,
        vld_out => regslice_both_y_user_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_user_V_U_apdone_blk);

    regslice_both_y_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TLAST_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_last_V_U_ack_in_dummy,
        data_out => y_TLAST,
        vld_out => regslice_both_y_last_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_last_V_U_apdone_blk);

    regslice_both_y_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TID_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_id_V_U_ack_in_dummy,
        data_out => y_TID,
        vld_out => regslice_both_y_id_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_id_V_U_apdone_blk);

    regslice_both_y_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TDEST_int,
        vld_in => y_TVALID_int,
        ack_in => regslice_both_y_dest_V_U_ack_in_dummy,
        data_out => y_TDEST,
        vld_out => regslice_both_y_dest_V_U_vld_out,
        ack_out => y_TREADY,
        apdone_blk => regslice_both_y_dest_V_U_apdone_blk);

    regslice_both_img1_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TDATA,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_data_V_U_ack_in,
        data_out => img1_TDATA_int,
        vld_out => img1_TVALID_int,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_data_V_U_apdone_blk);

    regslice_both_img1_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TKEEP,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_keep_V_U_ack_in,
        data_out => img1_TKEEP_int,
        vld_out => regslice_both_img1_keep_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_keep_V_U_apdone_blk);

    regslice_both_img1_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TSTRB,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_strb_V_U_ack_in,
        data_out => img1_TSTRB_int,
        vld_out => regslice_both_img1_strb_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_strb_V_U_apdone_blk);

    regslice_both_img1_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TUSER,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_user_V_U_ack_in,
        data_out => img1_TUSER_int,
        vld_out => regslice_both_img1_user_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_user_V_U_apdone_blk);

    regslice_both_img1_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TLAST,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_last_V_U_ack_in,
        data_out => img1_TLAST_int,
        vld_out => regslice_both_img1_last_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_last_V_U_apdone_blk);

    regslice_both_img1_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TID,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_id_V_U_ack_in,
        data_out => img1_TID_int,
        vld_out => regslice_both_img1_id_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_id_V_U_apdone_blk);

    regslice_both_img1_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img1_TDEST,
        vld_in => img1_TVALID,
        ack_in => regslice_both_img1_dest_V_U_ack_in,
        data_out => img1_TDEST_int,
        vld_out => regslice_both_img1_dest_V_U_vld_out,
        ack_out => img1_TREADY_int,
        apdone_blk => regslice_both_img1_dest_V_U_apdone_blk);

    regslice_both_img2_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TDATA,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_data_V_U_ack_in,
        data_out => img2_TDATA_int,
        vld_out => img2_TVALID_int,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_data_V_U_apdone_blk);

    regslice_both_img2_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TKEEP,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_keep_V_U_ack_in,
        data_out => img2_TKEEP_int,
        vld_out => regslice_both_img2_keep_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_keep_V_U_apdone_blk);

    regslice_both_img2_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TSTRB,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_strb_V_U_ack_in,
        data_out => img2_TSTRB_int,
        vld_out => regslice_both_img2_strb_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_strb_V_U_apdone_blk);

    regslice_both_img2_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TUSER,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_user_V_U_ack_in,
        data_out => img2_TUSER_int,
        vld_out => regslice_both_img2_user_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_user_V_U_apdone_blk);

    regslice_both_img2_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TLAST,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_last_V_U_ack_in,
        data_out => img2_TLAST_int,
        vld_out => regslice_both_img2_last_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_last_V_U_apdone_blk);

    regslice_both_img2_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TID,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_id_V_U_ack_in,
        data_out => img2_TID_int,
        vld_out => regslice_both_img2_id_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_id_V_U_apdone_blk);

    regslice_both_img2_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img2_TDEST,
        vld_in => img2_TVALID,
        ack_in => regslice_both_img2_dest_V_U_ack_in,
        data_out => img2_TDEST_int,
        vld_out => regslice_both_img2_dest_V_U_vld_out,
        ack_out => img2_TREADY_int,
        apdone_blk => regslice_both_img2_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, regslice_both_y_data_V_U_apdone_blk, y_TREADY_int, img1_TVALID_int, img2_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((img2_TVALID_int = ap_const_logic_0) or (img1_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((y_TREADY_int = ap_const_logic_0) or (regslice_both_y_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    abscond_100_fu_185_p2 <= "1" when (signed(sub_ln22_fu_173_p2) > signed(ap_const_lv32_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(img1_TVALID_int, img2_TVALID_int)
    begin
                ap_block_state1 <= ((img2_TVALID_int = ap_const_logic_0) or (img1_TVALID_int = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    img1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, img1_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            img1_TDATA_blk_n <= img1_TVALID_int;
        else 
            img1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img1_TREADY_assign_proc : process(img1_TVALID, regslice_both_img1_data_V_U_ack_in)
    begin
        if (((img1_TVALID = ap_const_logic_1) and (regslice_both_img1_data_V_U_ack_in = ap_const_logic_1))) then 
            img1_TREADY <= ap_const_logic_1;
        else 
            img1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    img1_TREADY_int_assign_proc : process(ap_CS_fsm_state1, y_TREADY_int, img1_TVALID_int, img2_TVALID_int)
    begin
        if ((not(((img2_TVALID_int = ap_const_logic_0) or (img1_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img1_TREADY_int <= ap_const_logic_1;
        else 
            img1_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    img2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, img2_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            img2_TDATA_blk_n <= img2_TVALID_int;
        else 
            img2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img2_TREADY_assign_proc : process(img2_TVALID, regslice_both_img2_data_V_U_ack_in)
    begin
        if (((img2_TVALID = ap_const_logic_1) and (regslice_both_img2_data_V_U_ack_in = ap_const_logic_1))) then 
            img2_TREADY <= ap_const_logic_1;
        else 
            img2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    img2_TREADY_int_assign_proc : process(ap_CS_fsm_state1, y_TREADY_int, img1_TVALID_int, img2_TVALID_int)
    begin
        if ((not(((img2_TVALID_int = ap_const_logic_0) or (img1_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img2_TREADY_int <= ap_const_logic_1;
        else 
            img2_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_c_ARADDR <= ap_const_lv32_0;
    m_axi_c_ARBURST <= ap_const_lv2_0;
    m_axi_c_ARCACHE <= ap_const_lv4_0;
    m_axi_c_ARID <= ap_const_lv1_0;
    m_axi_c_ARLEN <= ap_const_lv8_0;
    m_axi_c_ARLOCK <= ap_const_lv2_0;
    m_axi_c_ARPROT <= ap_const_lv3_0;
    m_axi_c_ARQOS <= ap_const_lv4_0;
    m_axi_c_ARREGION <= ap_const_lv4_0;
    m_axi_c_ARSIZE <= ap_const_lv3_0;
    m_axi_c_ARUSER <= ap_const_lv1_0;
    m_axi_c_ARVALID <= ap_const_logic_0;
    m_axi_c_AWADDR <= ap_const_lv32_0;
    m_axi_c_AWBURST <= ap_const_lv2_0;
    m_axi_c_AWCACHE <= ap_const_lv4_0;
    m_axi_c_AWID <= ap_const_lv1_0;
    m_axi_c_AWLEN <= ap_const_lv8_0;
    m_axi_c_AWLOCK <= ap_const_lv2_0;
    m_axi_c_AWPROT <= ap_const_lv3_0;
    m_axi_c_AWQOS <= ap_const_lv4_0;
    m_axi_c_AWREGION <= ap_const_lv4_0;
    m_axi_c_AWSIZE <= ap_const_lv3_0;
    m_axi_c_AWUSER <= ap_const_lv1_0;
    m_axi_c_AWVALID <= ap_const_logic_0;
    m_axi_c_BREADY <= ap_const_logic_0;
    m_axi_c_RREADY <= ap_const_logic_0;
    m_axi_c_WDATA <= ap_const_lv32_0;
    m_axi_c_WID <= ap_const_lv1_0;
    m_axi_c_WLAST <= ap_const_logic_0;
    m_axi_c_WSTRB <= ap_const_lv4_0;
    m_axi_c_WUSER <= ap_const_lv1_0;
    m_axi_c_WVALID <= ap_const_logic_0;
    neg_100_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln22_fu_173_p2));
    sub_ln22_fu_173_p2 <= std_logic_vector(unsigned(img1_TDATA_int) - unsigned(img2_TDATA_int));

    y_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, y_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y_TDATA_blk_n <= y_TREADY_int;
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TDATA_int <= 
        sub_ln22_fu_173_p2 when (abscond_100_fu_185_p2(0) = '1') else 
        neg_100_fu_179_p2;
    y_TVALID <= regslice_both_y_data_V_U_vld_out;

    y_TVALID_int_assign_proc : process(ap_CS_fsm_state1, y_TREADY_int, img1_TVALID_int, img2_TVALID_int)
    begin
        if ((not(((img2_TVALID_int = ap_const_logic_0) or (img1_TVALID_int = ap_const_logic_0) or (y_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_TVALID_int <= ap_const_logic_1;
        else 
            y_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
