// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="abs_diff,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.802000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=172,HLS_VERSION=2020_1}" *)

module abs_diff (
        ap_clk,
        ap_rst_n,
        y_TDATA,
        y_TVALID,
        y_TREADY,
        y_TKEEP,
        y_TSTRB,
        y_TUSER,
        y_TLAST,
        y_TID,
        y_TDEST,
        m_axi_c_AWVALID,
        m_axi_c_AWREADY,
        m_axi_c_AWADDR,
        m_axi_c_AWID,
        m_axi_c_AWLEN,
        m_axi_c_AWSIZE,
        m_axi_c_AWBURST,
        m_axi_c_AWLOCK,
        m_axi_c_AWCACHE,
        m_axi_c_AWPROT,
        m_axi_c_AWQOS,
        m_axi_c_AWREGION,
        m_axi_c_AWUSER,
        m_axi_c_WVALID,
        m_axi_c_WREADY,
        m_axi_c_WDATA,
        m_axi_c_WSTRB,
        m_axi_c_WLAST,
        m_axi_c_WID,
        m_axi_c_WUSER,
        m_axi_c_ARVALID,
        m_axi_c_ARREADY,
        m_axi_c_ARADDR,
        m_axi_c_ARID,
        m_axi_c_ARLEN,
        m_axi_c_ARSIZE,
        m_axi_c_ARBURST,
        m_axi_c_ARLOCK,
        m_axi_c_ARCACHE,
        m_axi_c_ARPROT,
        m_axi_c_ARQOS,
        m_axi_c_ARREGION,
        m_axi_c_ARUSER,
        m_axi_c_RVALID,
        m_axi_c_RREADY,
        m_axi_c_RDATA,
        m_axi_c_RLAST,
        m_axi_c_RID,
        m_axi_c_RUSER,
        m_axi_c_RRESP,
        m_axi_c_BVALID,
        m_axi_c_BREADY,
        m_axi_c_BRESP,
        m_axi_c_BID,
        m_axi_c_BUSER,
        img1_TDATA,
        img1_TVALID,
        img1_TREADY,
        img1_TKEEP,
        img1_TSTRB,
        img1_TUSER,
        img1_TLAST,
        img1_TID,
        img1_TDEST,
        img2_TDATA,
        img2_TVALID,
        img2_TREADY,
        img2_TKEEP,
        img2_TSTRB,
        img2_TUSER,
        img2_TLAST,
        img2_TID,
        img2_TDEST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_M_AXI_C_ID_WIDTH = 1;
parameter    C_M_AXI_C_ADDR_WIDTH = 32;
parameter    C_M_AXI_C_DATA_WIDTH = 32;
parameter    C_M_AXI_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_C_TARGET_ADDR = 0;
parameter    C_M_AXI_C_USER_VALUE = 0;
parameter    C_M_AXI_C_PROT_VALUE = 0;
parameter    C_M_AXI_C_CACHE_VALUE = 3;

parameter C_M_AXI_C_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] y_TDATA;
output   y_TVALID;
input   y_TREADY;
output  [3:0] y_TKEEP;
output  [3:0] y_TSTRB;
output  [0:0] y_TUSER;
output  [0:0] y_TLAST;
output  [0:0] y_TID;
output  [0:0] y_TDEST;
output   m_axi_c_AWVALID;
input   m_axi_c_AWREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_AWADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_AWID;
output  [7:0] m_axi_c_AWLEN;
output  [2:0] m_axi_c_AWSIZE;
output  [1:0] m_axi_c_AWBURST;
output  [1:0] m_axi_c_AWLOCK;
output  [3:0] m_axi_c_AWCACHE;
output  [2:0] m_axi_c_AWPROT;
output  [3:0] m_axi_c_AWQOS;
output  [3:0] m_axi_c_AWREGION;
output  [C_M_AXI_C_AWUSER_WIDTH - 1:0] m_axi_c_AWUSER;
output   m_axi_c_WVALID;
input   m_axi_c_WREADY;
output  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_WDATA;
output  [C_M_AXI_C_WSTRB_WIDTH - 1:0] m_axi_c_WSTRB;
output   m_axi_c_WLAST;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_WID;
output  [C_M_AXI_C_WUSER_WIDTH - 1:0] m_axi_c_WUSER;
output   m_axi_c_ARVALID;
input   m_axi_c_ARREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_ARADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_ARID;
output  [7:0] m_axi_c_ARLEN;
output  [2:0] m_axi_c_ARSIZE;
output  [1:0] m_axi_c_ARBURST;
output  [1:0] m_axi_c_ARLOCK;
output  [3:0] m_axi_c_ARCACHE;
output  [2:0] m_axi_c_ARPROT;
output  [3:0] m_axi_c_ARQOS;
output  [3:0] m_axi_c_ARREGION;
output  [C_M_AXI_C_ARUSER_WIDTH - 1:0] m_axi_c_ARUSER;
input   m_axi_c_RVALID;
output   m_axi_c_RREADY;
input  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_RDATA;
input   m_axi_c_RLAST;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_RID;
input  [C_M_AXI_C_RUSER_WIDTH - 1:0] m_axi_c_RUSER;
input  [1:0] m_axi_c_RRESP;
input   m_axi_c_BVALID;
output   m_axi_c_BREADY;
input  [1:0] m_axi_c_BRESP;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_BID;
input  [C_M_AXI_C_BUSER_WIDTH - 1:0] m_axi_c_BUSER;
input  [31:0] img1_TDATA;
input   img1_TVALID;
output   img1_TREADY;
input  [3:0] img1_TKEEP;
input  [3:0] img1_TSTRB;
input  [0:0] img1_TUSER;
input  [0:0] img1_TLAST;
input  [0:0] img1_TID;
input  [0:0] img1_TDEST;
input  [31:0] img2_TDATA;
input   img2_TVALID;
output   img2_TREADY;
input  [3:0] img2_TKEEP;
input  [3:0] img2_TSTRB;
input  [0:0] img2_TUSER;
input  [0:0] img2_TLAST;
input  [0:0] img2_TID;
input  [0:0] img2_TDEST;

reg img1_TREADY;
reg img2_TREADY;

 reg    ap_rst_n_inv;
reg    y_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg    img1_TDATA_blk_n;
reg    img2_TDATA_blk_n;
reg    ap_block_state1;
wire   [31:0] sub_ln22_fu_173_p2;
wire   [0:0] abscond_100_fu_185_p2;
wire   [31:0] neg_100_fu_179_p2;
reg   [1:0] ap_NS_fsm;
wire    regslice_both_y_data_V_U_apdone_blk;
wire   [31:0] y_TDATA_int;
reg    y_TVALID_int;
wire    y_TREADY_int;
wire    regslice_both_y_data_V_U_vld_out;
wire    regslice_both_y_keep_V_U_apdone_blk;
wire    regslice_both_y_keep_V_U_ack_in_dummy;
wire    regslice_both_y_keep_V_U_vld_out;
wire    regslice_both_y_strb_V_U_apdone_blk;
wire    regslice_both_y_strb_V_U_ack_in_dummy;
wire    regslice_both_y_strb_V_U_vld_out;
wire    regslice_both_y_user_V_U_apdone_blk;
wire    regslice_both_y_user_V_U_ack_in_dummy;
wire    regslice_both_y_user_V_U_vld_out;
wire    regslice_both_y_last_V_U_apdone_blk;
wire    regslice_both_y_last_V_U_ack_in_dummy;
wire    regslice_both_y_last_V_U_vld_out;
wire    regslice_both_y_id_V_U_apdone_blk;
wire    regslice_both_y_id_V_U_ack_in_dummy;
wire    regslice_both_y_id_V_U_vld_out;
wire    regslice_both_y_dest_V_U_apdone_blk;
wire    regslice_both_y_dest_V_U_ack_in_dummy;
wire    regslice_both_y_dest_V_U_vld_out;
wire    regslice_both_img1_data_V_U_apdone_blk;
wire   [31:0] img1_TDATA_int;
wire    img1_TVALID_int;
reg    img1_TREADY_int;
wire    regslice_both_img1_data_V_U_ack_in;
wire    regslice_both_img1_keep_V_U_apdone_blk;
wire   [3:0] img1_TKEEP_int;
wire    regslice_both_img1_keep_V_U_vld_out;
wire    regslice_both_img1_keep_V_U_ack_in;
wire    regslice_both_img1_strb_V_U_apdone_blk;
wire   [3:0] img1_TSTRB_int;
wire    regslice_both_img1_strb_V_U_vld_out;
wire    regslice_both_img1_strb_V_U_ack_in;
wire    regslice_both_img1_user_V_U_apdone_blk;
wire   [0:0] img1_TUSER_int;
wire    regslice_both_img1_user_V_U_vld_out;
wire    regslice_both_img1_user_V_U_ack_in;
wire    regslice_both_img1_last_V_U_apdone_blk;
wire   [0:0] img1_TLAST_int;
wire    regslice_both_img1_last_V_U_vld_out;
wire    regslice_both_img1_last_V_U_ack_in;
wire    regslice_both_img1_id_V_U_apdone_blk;
wire   [0:0] img1_TID_int;
wire    regslice_both_img1_id_V_U_vld_out;
wire    regslice_both_img1_id_V_U_ack_in;
wire    regslice_both_img1_dest_V_U_apdone_blk;
wire   [0:0] img1_TDEST_int;
wire    regslice_both_img1_dest_V_U_vld_out;
wire    regslice_both_img1_dest_V_U_ack_in;
wire    regslice_both_img2_data_V_U_apdone_blk;
wire   [31:0] img2_TDATA_int;
wire    img2_TVALID_int;
reg    img2_TREADY_int;
wire    regslice_both_img2_data_V_U_ack_in;
wire    regslice_both_img2_keep_V_U_apdone_blk;
wire   [3:0] img2_TKEEP_int;
wire    regslice_both_img2_keep_V_U_vld_out;
wire    regslice_both_img2_keep_V_U_ack_in;
wire    regslice_both_img2_strb_V_U_apdone_blk;
wire   [3:0] img2_TSTRB_int;
wire    regslice_both_img2_strb_V_U_vld_out;
wire    regslice_both_img2_strb_V_U_ack_in;
wire    regslice_both_img2_user_V_U_apdone_blk;
wire   [0:0] img2_TUSER_int;
wire    regslice_both_img2_user_V_U_vld_out;
wire    regslice_both_img2_user_V_U_ack_in;
wire    regslice_both_img2_last_V_U_apdone_blk;
wire   [0:0] img2_TLAST_int;
wire    regslice_both_img2_last_V_U_vld_out;
wire    regslice_both_img2_last_V_U_ack_in;
wire    regslice_both_img2_id_V_U_apdone_blk;
wire   [0:0] img2_TID_int;
wire    regslice_both_img2_id_V_U_vld_out;
wire    regslice_both_img2_id_V_U_ack_in;
wire    regslice_both_img2_dest_V_U_apdone_blk;
wire   [0:0] img2_TDEST_int;
wire    regslice_both_img2_dest_V_U_vld_out;
wire    regslice_both_img2_dest_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_TDATA_int),
    .vld_in(y_TVALID_int),
    .ack_in(y_TREADY_int),
    .data_out(y_TDATA),
    .vld_out(regslice_both_y_data_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TKEEP_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_keep_V_U_ack_in_dummy),
    .data_out(y_TKEEP),
    .vld_out(regslice_both_y_keep_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_y_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TSTRB_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_strb_V_U_ack_in_dummy),
    .data_out(y_TSTRB),
    .vld_out(regslice_both_y_strb_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TUSER_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_user_V_U_ack_in_dummy),
    .data_out(y_TUSER),
    .vld_out(regslice_both_y_user_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TLAST_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_last_V_U_ack_in_dummy),
    .data_out(y_TLAST),
    .vld_out(regslice_both_y_last_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TID_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_id_V_U_ack_in_dummy),
    .data_out(y_TID),
    .vld_out(regslice_both_y_id_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_y_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TDEST_int),
    .vld_in(y_TVALID_int),
    .ack_in(regslice_both_y_dest_V_U_ack_in_dummy),
    .data_out(y_TDEST),
    .vld_out(regslice_both_y_dest_V_U_vld_out),
    .ack_out(y_TREADY),
    .apdone_blk(regslice_both_y_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_img1_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TDATA),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_data_V_U_ack_in),
    .data_out(img1_TDATA_int),
    .vld_out(img1_TVALID_int),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_img1_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TKEEP),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_keep_V_U_ack_in),
    .data_out(img1_TKEEP_int),
    .vld_out(regslice_both_img1_keep_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_img1_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TSTRB),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_strb_V_U_ack_in),
    .data_out(img1_TSTRB_int),
    .vld_out(regslice_both_img1_strb_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img1_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TUSER),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_user_V_U_ack_in),
    .data_out(img1_TUSER_int),
    .vld_out(regslice_both_img1_user_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img1_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TLAST),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_last_V_U_ack_in),
    .data_out(img1_TLAST_int),
    .vld_out(regslice_both_img1_last_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img1_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TID),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_id_V_U_ack_in),
    .data_out(img1_TID_int),
    .vld_out(regslice_both_img1_id_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img1_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img1_TDEST),
    .vld_in(img1_TVALID),
    .ack_in(regslice_both_img1_dest_V_U_ack_in),
    .data_out(img1_TDEST_int),
    .vld_out(regslice_both_img1_dest_V_U_vld_out),
    .ack_out(img1_TREADY_int),
    .apdone_blk(regslice_both_img1_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_img2_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TDATA),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_data_V_U_ack_in),
    .data_out(img2_TDATA_int),
    .vld_out(img2_TVALID_int),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_img2_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TKEEP),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_keep_V_U_ack_in),
    .data_out(img2_TKEEP_int),
    .vld_out(regslice_both_img2_keep_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_img2_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TSTRB),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_strb_V_U_ack_in),
    .data_out(img2_TSTRB_int),
    .vld_out(regslice_both_img2_strb_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img2_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TUSER),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_user_V_U_ack_in),
    .data_out(img2_TUSER_int),
    .vld_out(regslice_both_img2_user_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img2_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TLAST),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_last_V_U_ack_in),
    .data_out(img2_TLAST_int),
    .vld_out(regslice_both_img2_last_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img2_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TID),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_id_V_U_ack_in),
    .data_out(img2_TID_int),
    .vld_out(regslice_both_img2_id_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_img2_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(img2_TDEST),
    .vld_in(img2_TVALID),
    .ack_in(regslice_both_img2_dest_V_U_ack_in),
    .data_out(img2_TDEST_int),
    .vld_out(regslice_both_img2_dest_V_U_vld_out),
    .ack_out(img2_TREADY_int),
    .apdone_blk(regslice_both_img2_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img1_TDATA_blk_n = img1_TVALID_int;
    end else begin
        img1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((img1_TVALID == 1'b1) & (regslice_both_img1_data_V_U_ack_in == 1'b1))) begin
        img1_TREADY = 1'b1;
    end else begin
        img1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((img2_TVALID_int == 1'b0) | (img1_TVALID_int == 1'b0) | (y_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img1_TREADY_int = 1'b1;
    end else begin
        img1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img2_TDATA_blk_n = img2_TVALID_int;
    end else begin
        img2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((img2_TVALID == 1'b1) & (regslice_both_img2_data_V_U_ack_in == 1'b1))) begin
        img2_TREADY = 1'b1;
    end else begin
        img2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((img2_TVALID_int == 1'b0) | (img1_TVALID_int == 1'b0) | (y_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img2_TREADY_int = 1'b1;
    end else begin
        img2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        y_TDATA_blk_n = y_TREADY_int;
    end else begin
        y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img2_TVALID_int == 1'b0) | (img1_TVALID_int == 1'b0) | (y_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_TVALID_int = 1'b1;
    end else begin
        y_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img2_TVALID_int == 1'b0) | (img1_TVALID_int == 1'b0) | (y_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((y_TREADY_int == 1'b0) | (regslice_both_y_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abscond_100_fu_185_p2 = (($signed(sub_ln22_fu_173_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((img2_TVALID_int == 1'b0) | (img1_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign m_axi_c_ARADDR = 32'd0;

assign m_axi_c_ARBURST = 2'd0;

assign m_axi_c_ARCACHE = 4'd0;

assign m_axi_c_ARID = 1'd0;

assign m_axi_c_ARLEN = 8'd0;

assign m_axi_c_ARLOCK = 2'd0;

assign m_axi_c_ARPROT = 3'd0;

assign m_axi_c_ARQOS = 4'd0;

assign m_axi_c_ARREGION = 4'd0;

assign m_axi_c_ARSIZE = 3'd0;

assign m_axi_c_ARUSER = 1'd0;

assign m_axi_c_ARVALID = 1'b0;

assign m_axi_c_AWADDR = 32'd0;

assign m_axi_c_AWBURST = 2'd0;

assign m_axi_c_AWCACHE = 4'd0;

assign m_axi_c_AWID = 1'd0;

assign m_axi_c_AWLEN = 8'd0;

assign m_axi_c_AWLOCK = 2'd0;

assign m_axi_c_AWPROT = 3'd0;

assign m_axi_c_AWQOS = 4'd0;

assign m_axi_c_AWREGION = 4'd0;

assign m_axi_c_AWSIZE = 3'd0;

assign m_axi_c_AWUSER = 1'd0;

assign m_axi_c_AWVALID = 1'b0;

assign m_axi_c_BREADY = 1'b0;

assign m_axi_c_RREADY = 1'b0;

assign m_axi_c_WDATA = 32'd0;

assign m_axi_c_WID = 1'd0;

assign m_axi_c_WLAST = 1'b0;

assign m_axi_c_WSTRB = 4'd0;

assign m_axi_c_WUSER = 1'd0;

assign m_axi_c_WVALID = 1'b0;

assign neg_100_fu_179_p2 = (32'd0 - sub_ln22_fu_173_p2);

assign sub_ln22_fu_173_p2 = (img1_TDATA_int - img2_TDATA_int);

assign y_TDATA_int = ((abscond_100_fu_185_p2[0:0] === 1'b1) ? sub_ln22_fu_173_p2 : neg_100_fu_179_p2);

assign y_TVALID = regslice_both_y_data_V_U_vld_out;

endmodule //abs_diff
